
% ORBIT VISUALIZATION - TRAJECTORY PLOT AND ELEMENTS
% ---------------------------------------------------------------------------------------------------------------------
% Plots the 3D orbit, Groundtrack, and 3 orbital elements over time in tiled window from input table of state vectors 
% and corresponding time values. State vectors defining the trajectory can be generated by analytical 2-body relations 
% or by numerical integration of satellite equations of motion, with or without perturbing forces. 
%
% Map Images:
%
%     equirectangular_1.jpg
%     equirectangular_2.png
%
% Author: Matthew Buckhout
% Updated: 08/24/2020 
%
% Inputs:
%
%     - [t]          Array of Time Values, +from Initial Date/Time      [sec]
%     - [STATE]      Matrix of Position and Velocity Vectors            [km][km/s]
%     - [MJDi]       Modified Julian Date, Initial (UT1)                [days]
%     - [MJDf]       Modified Julian Date, Final (UT1)                  [days]
%     - [DATEi]      Initial Date (for plot label)                      [yyyy mm dd]
%     - [DATEf]      Final Date (for plot label)                        [yyyy mm dd]
%     - [UTCi]       Initial Time (UTC) (for plot label)                [hh mm ss]
%     - [UTCf]       Final Time (UTC) (for plot label)                  [hh mm ss]                               
%
% Format for t and STATE:
%
%       t       STATE
%       -----   ------------------------------------------
%         t1      R1x    R1y    R1z    V1x    V1y    V1z
%         t2      R2x    R2y    R2z    V2x    V2y    V2z
%         t3      R3x    R3y    R3z    V3x    V3y    V3z
%         t4      R4x    R4y    R4z    V4x    V4y    V4z
%         t5      R5x    R5y    R5z    V5x    V5y    V5z
%
%                               . . .
%
%         tf      Rfx    Rfy    Rfz    Vfx    Vfy    Vfz
%       -----   ------------------------------------------
%
% Functions:
%
%     - getdata_EOP_fast
%     - subtightplot
%     - local_sidereal
%     - EOP
%     - gregorian_date
%     - orbital_elements
%     - ECI_ground
%
% References:
%     - subtightplot.m (Felipe G. Nievinski - 2013) 
%           https://www.mathworks.com/matlabcentral/fileexchange/39664-subtightplot
%     - 3D Earth Example (Ryan Gray - 2004,2006,2013)
%           https://www.mathworks.com/matlabcentral/fileexchange/13823-3d-earth-example
% ---------------------------------------------------------------------------------------------------------------------

function trajectory_multi_plot(t,STATE,MJDi,MJDf,DATEi,DATEf,UTCi,UTCf)
     
   %Constants
   RE = 6378.1363; %[km] Earth Mean Equatorial Radius 
   mu = 3.986004415e5; %[km^3/s^2] Earth Gravitational Parameter
   EOPdata = getdata_EOP_fast; %Earth Orientation Data
   
   %Sizing and Positioning Figure
   set(groot,'defaultfigureposition',[20 100 1860 870])

   % -------------------------------------------  3 D  O R B I T  P L O T  --------------------------------------------
   
   figure('Color','k');
   make_it_tight = true;
   subplot = @(m,n,p) subtightplot (m, n, p, [0.03 0.06], [0.07 0.02], [0.06 0.01]);
   subplot(3,6,[4,5,6,10,11,12,16,17,18])
           
   %Plot Textured Ellipsoid Earth Model [modified from Original Code: Ryan Gray 2004,2006,2013]
   %https://www.mathworks.com/matlabcentral/fileexchange/13823-3d-earth-example

   %Greenwich Mean Standard Time
   [~,GMST] = local_sidereal(0,MJDf); %[rad]
   GMST = rad2deg(GMST); %[deg]

   %Earth Ellipsoid Model
   RE = 6378.1363; %[km] Earth Mean Equatorial Radius
   bE = 6356.7516005; %[km] Earth Semi-minor Axis (Polar Radius)(Derived)
   eE = 0.081819221456; %Earth Reference Ellipsoid Eccentricity
   npanels = 180; %Number of panels around the equator 
   alpha   = 1; %Transparency
   [x_refellipse, y_refellipse, z_refellipse] = ellipsoid(0, 0, 0, RE, RE, bE, npanels);
   globe = surf(x_refellipse, y_refellipse, -z_refellipse, ... 
           'FaceColor', 'none', 'EdgeColor', 0.5*[1 1 1]);

   rotate(globe,[0 0 1],(GMST+180)); %Rotates Earth to correct GMST 
                                     %(-X axis through Greenwich at start)

                                     %Texture Map
   [world,map] = imread('equirectangular_1.jpg');
   world = im2double(world);
   set(globe, 'FaceColor', 'texturemap', 'CData', world, ... 
            'FaceAlpha', alpha, 'EdgeColor', 'none');

   %Plot Formatting
   grid on;
   set(gca,'Color','k');
   set(gca,'GridColor',[1 1 1]);
   axis equal;
   hold on

   %Plotting Satellite Location at Initial Time
   p1 = plot3(STATE(1,1),STATE(1,2),STATE(1,3),'d','color',[0, 0.4470, 0.7410], ...
              'LineWidth',1.5,'MarkerSize',9);
   hold on
   %Plotting Satellite Location at Final Time
   p2 = plot3(STATE(end,1),STATE(end,2),STATE(end,3),'rd','MarkerSize',9,'LineWidth',2);
   hold on
   %Plot of Orbit
   p3 = plot3(STATE(:,1),STATE(:,2),STATE(:,3),'color',[0, 0.4470, 0.7410],'LineWidth',2);
   hold on

   %Bounding Plot
   axis equal
   x1 = xlim;
   y1 = ylim;
   z1 = zlim;
      
   if (abs(x1(1)) <= (RE + 5000))
      x1(1) = -RE - 5000;
   end
   if (abs(x1(2)) <= (RE + 5000))
      x1(2) = RE + 5000;
   end
   if (abs(y1(1)) <= (RE + 5000))
      y1(1) = -RE - 5000;
   end
   if (abs(y1(2)) <= (RE + 5000))
      y1(2) = RE + 5000;
   end   
   if (abs(z1(1)) <= (RE + 5000))
      z1(1) = -RE - 5000;
   end
   if (abs(z1(2)) <= (RE + 5000))
      z1(2) = RE + 5000;
   end  
      
   %Plot of Equitorial plane
   xx = x1(1):abs(x1(1))+abs(x1(2)):x1(2);
   yy = y1(1):abs(y1(1))+abs(y1(2)):y1(2);
   [xx,yy] = meshgrid(xx,yy);
   zz = zeros(size(xx));
   surf(xx,yy,zz,'FaceColor',[0 0.5 0.5],'FaceAlpha',0.15,'EdgeColor',[0.5 0.5 0.5]);
   hold on

   %Plot Formatting
   set(gca,'Color','k','XColor',[1 1 1],'YColor',[1 1 1],'ZColor',[1 1 1],'FontSize',12);
   xlim(x1);
   ylim(y1);
   zlim(z1);
   grid on
   xlabel('X GCRF (km)');
   ylabel('Y GCRF (km)');
   zlabel('Z GCRF (km)');

   %Converting from Modified Julian Date - Initial Date/Time
   [xpi,ypi,dUT1i,dATi] = EOP(fix(MJDi),EOPdata); %(UT1 - UTC)
   MJD_UTCi = MJDi - (dUT1i/86400); %(UTC)
   [yri,moi,di,hi,mi,si] = gregorian_date(MJD_UTCi); %Gregorian Date/Time (UTC)
   DATEi = [yri moi di];
   UTCi = [hi mi si];
   
   %Converting from Modified Julian Date - Final Date/Time
   MJDf = MJDi + (t(end)/86400); %UT1
   [xpf,ypf,dUT1f,dATf] = EOP(fix(MJDf),EOPdata); %(UT1 - UTC)
   MJD_UTCf = MJDf - (dUT1f/86400); %(UTC)
   [yrf,mof,df,hf,mf,sf] = gregorian_date(MJD_UTCf); %Gregorian Date/Time (UTC)
   DATEf = [yrf mof df];
   UTCf = [hf mf sf];
   
   %Legend
   lgd = legend([p1 p2],sprintf('Initial %d-%02d-%d | %02d:%02d:%02d UTC',DATEi(1),DATEi(2), ...
                DATEi(3),UTCi(1),UTCi(2),UTCi(3)), ...
                sprintf('Final %d-%02d-%d | %02d:%02d:%02d UTC',DATEf(1),DATEf(2), ...
                DATEf(3),UTCf(1),UTCf(2),UTCf(3)));

   set(lgd,'color','w','FontSize',12,'Location','northeast')
   
   % ---------------------------------------  G R O U N D  T R A C K  P L O T  ----------------------------------------
   subplot(3,6,[1,2,3,7,8,9])

   %Earth Map
   map = imread('equirectangular_2.png'); %High Res
   [y,x,z] = size(map);
   image('XData', [-180 180], 'YData', [-90 90],'Cdata',flipud(map));
   hold on   

   %
   q = 1;
   start(1) = 1; 
   aset = zeros(numel(t),1);
   eset = zeros(numel(t),1);
   iset = zeros(numel(t),1);
   OMEGAset = zeros(numel(t),1);
   omegaset = zeros(numel(t),1);
   LATITUDE = zeros(numel(t),1);
   LONGITUDE = zeros(numel(t),1);
   for mm=1:1:numel(t)
      
      %Periodic and Secular Effects on Elements
      [~,aset(mm),eset(mm),iset(mm),OMEGAset(mm),omegaset(mm),~,~,~,~] = ...
                           orbital_elements(mu,STATE(mm,1:3),STATE(mm,4:6));

      if (mm == 1)
      
         %Time Step - UT1
         MJDstep = MJDi + t(mm)/86400;
         
         %GMST
         [~,GMST] = local_sidereal(0,MJDstep);

         %Latitude and Longitude
         [LATITUDE(mm),LONGITUDE(mm),~] = ECI_ground(STATE(mm,1:3),GMST);
         
      else
      
         %Time Step - UT1
         MJDstep = MJDi + t(mm)/86400;
         
         %GMST
         [~,GMST] = local_sidereal(0,MJDstep);

         %Latitude and Longitude
         [LATITUDE(mm),LONGITUDE(mm),~] = ECI_ground(STATE(mm,1:3),GMST);

         %Longitude Handling
         if (LONGITUDE(mm-1) > 180)
            LONGITUDE(mm-1) = LONGITUDE(mm-1) - 360;
            
         elseif (LONGITUDE(mm-1) < -180)
            LONGITUDE(mm-1) = LONGITUDE(mm-1) + 360;
            
         else
            LONGITUDE(mm-1) = LONGITUDE(mm-1);
            
         end

         if (mm-1 < numel(LONGITUDE))
            signdiff = (LONGITUDE(mm-1)/abs(LONGITUDE(mm-1))) + (LONGITUDE(mm)/abs(LONGITUDE(mm)));
         end
         if (abs(LONGITUDE(mm-1)) < 90)
            signdiff = 1;
         end
         
         if (signdiff == 0)

            start(q+1) = mm;
            stop(q) = mm-1;
            q = q+1;

         end

      end
   end
   stop(q) = mm;

   %Plotting Satellite Location at Initial Time
   p21 = plot(LONGITUDE(1),LATITUDE(1),'d','color',[0, 0.4470, 0.7410], ...
              'LineWidth',1.5,'MarkerSize',9);
   hold on

   %Plotting Satellite Location at Final Time
   p22 = plot(LONGITUDE(end),LATITUDE(end),'rd','MarkerSize',9,'LineWidth',2);
   hold on

   %Plotting blocks of Latitude and Longitude
   for q=1:1:numel(start)

      plot(LONGITUDE(start(q):stop(q)),LATITUDE(start(q):stop(q)), ...
           'color',[0, 0.4470, 0.7410],'LineWidth',1.5);
      hold on

   end

   %Plotting
      
   %Boxing Plot
   plot([-180 -180],[-90 90],'k');
   hold on
   plot([180 180],[-90 90],'k');
   hold on
   plot([-180 180],[-90 -90],'k');
   hold on
   plot([-180 180],[90 90],'k');
   hold on

   %Axes
   axis equal
   box on;
   grid on;
   xlim([-180 180]);
   ylim([-90 90]);
   xticks([-180:15:180]);
   yticks([-90:15:90]);
   set(gca, 'Layer','top')
   set(gca,'Color','k','XColor',[1 1 1],'YColor',[1 1 1],'FontSize',12);

   xlabel('Longitude (deg)');
   ylabel('Latitude (deg)');
   
   % -------------------------------------------  E L E M E N T  P L O T S  -------------------------------------------
   
   %Right Ascension of Ascending Node
   subplot(3,6,13)
   plot(t/3600,(OMEGAset*(180/pi)),'LineWidth',2);
   xlabel('Time (hrs)');
   ylabel('RAAN (deg)');
   set(gca,'Color','k','XColor',[1 1 1],'YColor',[1 1 1],'FontSize',12);
   grid on;

   %Argument of Periapsis
   subplot(3,6,14) 
   plot(t/3600,(omegaset*(180/pi)),'LineWidth',2);
   xlabel('Time (hrs)');
   ylabel('Argument of Periapsis (deg)');
   set(gca,'Color','k','XColor',[1 1 1],'YColor',[1 1 1],'FontSize',12);
   grid on;

   %Inclination
   subplot(3,6,15) 
   plot(t/3600,(iset*(180/pi)),'LineWidth',2);
   xlabel('Time (hrs)');
   ylabel('Inclination (deg)');
   set(gca,'Color','k','XColor',[1 1 1],'YColor',[1 1 1],'FontSize',12);
   grid on;

   %Clearing intermediate data to free memory
   clear world;
   clear map;
   clear EOPdata;

   %Re-setting Default Figure Size
   set(groot,'defaultfigureposition',[300 200 560 420])
      
end