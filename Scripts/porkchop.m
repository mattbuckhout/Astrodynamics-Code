
clearvars; clc;

% PORKCHOP PLOTS FOR INTERPLANETARY TRANSFERS
% ---------------------------------------------------------------------------------------------------------------------
% Script generates transfer orbits between two planetary bodies across a range of launch dates and arrival dates. 
% The required characteristic energy (C3) and the arrival velocity relative to the target body for every trajectory 
% are represented in a Porkchop Plot, with contours of constant C3 and V_infinity. Two plots are generated by this 
% script: a full plot of all trajectories inside user specified bounds for C3 and arrival velocity, and a plot showing 
% only contours selected by the user, if certain constraints on C3 and arrival velocity are known. Porkchop plots are 
% used to determine launch windows for interplanetary missions, and allow one to quickly find a solution space of 
% possible transfers that satisfy known constraints on the launch vehicle and spacecraft.
%
% Positions and Velocities of launch and target bodies across the time period of interest are determined using the JPL 
% DE430 model for planetary ephemerides while the spacecraft trajectories between the two bodies are solutions to 
% Lambert's Problem using 2-body dynamics. Ephemerides are retrieved in Solar System Barycentric coordinates and 
% transformed to Heliocentric coordinates for 2-body transfer calculations. Inputs can be entered in the 
% "USER SPECIFIED INPUTS" section below the header.
%
% Author: Matthew Buckhout
% Updated: 09/07/2020 
%
% Inputs:
%
%     - [launch_body]      Identifier for Launch Planetary Body                                     -
%     - [target_body]      Identifier for Target Planetary Body                                     -
%     - [LDrange]          Range of Launch Dates, Modified Julian Date                             [MJD MJD]
%     - [ADrange]          Range of Arrival Dates, Modified Julian Date                            [MJD MJD]
%     - [fineness]         Step size for sweep through dates of interest                           [days]
%     - [C3bound]          Upper bound on C3 for transfer orbits (figure 1)                        [km^2/s^2]
%     - [Vinfbound]        Upper bound on Arrival Velocity for transfer orbits (figure 1)          [km/s]
%     - [C3contours]       Specified contours of constant C3 to plot (figure 2)                    [km^2/s^2]
%                             [contour1 contour2 contour3 ... ] 
%     - [Vinfcontours]     Specified contours of constant Arrival Velocity to plot (figure 2)      [km/s]
%                             [contour1 contour2 contour3 ... ] 
%
% Identifiers for Launch or Target Body:
%
%     1. Mercury
%     2. Venus
%     3. Earth-Moon Barycenter
%     4. Mars
%     5. Jupiter
%     6. Saturn
%     7. Uranus
%     8. Neptune
%     9. Pluto
%
% Data files required:
%
%     DE430t_1550_E.txt
%     DE430t_1650_E.txt
%     DE430t_1750_E.txt
%     DE430t_1850_E.txt
%     DE430t_1950_E.txt
%     DE430t_2050_E.txt
%     DE430t_2150_E.txt
%     DE430t_2250_E.txt
%     DE430t_2350_E.txt
%     DE430t_2450_E.txt
%     DE430t_2550_E.txt
%
% Functions:
%
%     - getdata_DE430
%     - planet_ephemerides_full_c
%     - lambert_c 
%
% References:
%     - Fundamentals of Astrodynamics with Applications, 2nd ed. (Vallado) (pg. 448-487)
%     - JPL DE430 Planetary Ephemerides Coefficient Files
%           https://ssd.jpl.nasa.gov/?planet_eph_export 
%
% ----------------------------------------------- USER SPECIFIED INPUTS -----------------------------------------------

launch_body  = 3; %-
target_body  = 4; %-

LDrange      = [58900 59200]; %[days]
ADrange      = [59000 59800]; %[days]
fineness     = 1; %[days]

C3bound      = 50; %[km^2/s^2]
Vinfbound    = 6; %[km/s]

C3contours   = [20]; %[km^2/s^2]
Vinfcontours = [2.7]; %[km/s]

% ------------------------------------------------ GENERATE TRANSFERS -------------------------------------------------

fprintf('\n');
fprintf('Loading Ephemerides...\n\n');

mu = 1.32712428e11; %[km^3/s^2] Sun Gravitational Parameter
MJD0 = LDrange(1); %Start period of interest
RANGE = [LDrange(1):1:ADrange(2)]; %Total range of dates 

[DE430coef] = getdata_DE430(LDrange(1),ADrange(2)); %Coefficients for Planetary Ephemerides

for i=1:1:numel(RANGE) %Generating ephemerides for launch and target bodies over time period of interest
   
   MJD = RANGE(i);
   
   [ephemerides] = planet_ephemerides_full_c(MJD,transpose(DE430coef),[launch_body target_body 11]); %(ICRF)
   
   sun_ephem = ephemerides(3,1:6); %Sun ephemerides (ICRF)
   int_ephem(i,:) = ephemerides(1,1:6) - sun_ephem; %Start planet ephemerides (HELIOCENTRIC)
   tgt_ephem(i,:) = ephemerides(2,1:6) - sun_ephem; %Target planet ephemerides (HELIOCENTRIC)
   
end

Rint0 = transpose(int_ephem((find(RANGE == MJD0)),1:3)); %[km] Initial Interceptor Position 
Vint0 = transpose(int_ephem((find(RANGE == MJD0)),4:6)); %[km/s] Initial Interceptor Velocity 
Rtgt0 = transpose(tgt_ephem((find(RANGE == MJD0)),1:3)); %[km] Initial Target Position 
Vtgt0 = transpose(tgt_ephem((find(RANGE == MJD0)),4:6)); %[km/s] Initial Target Velocity 
      
fprintf('Generating Transfers...\n\n');
k = 1;
for MJD1=LDrange(1):fineness:LDrange(2)
   
   delay = MJD1 - MJD0; %Delay (t0) to (t1)
   
   j = 1;
   for MJD2=ADrange(1):fineness:ADrange(2) 

      if (MJD1 < MJD2 - 10)
   
         TOF = MJD2 - MJD1; %Time of Flight (t1) to (t2)

         tm = 0; %Choose Transfer Method for minimum dV

         MJD1 = MJD0 + delay; %Time of Transfer Burn
         MJD2 = MJD1 + TOF; %Time of Intercept

         if (MJD0 ~= MJD1) 
            
            Rint1 = transpose(int_ephem((find(RANGE == MJD1)),1:3)); %[km] Target and Intercepting S/C after Delay
            Vint1 = transpose(int_ephem((find(RANGE == MJD1)),4:6)); %[km/s]
            Rtgt1 = transpose(tgt_ephem((find(RANGE == MJD1)),1:3)); %[km]
            Vtgt1 = transpose(tgt_ephem((find(RANGE == MJD1)),4:6)); %[km/s]

         else
         
            Rint1 = Rint0; %[km]
            Vint1 = Vint0; %[km/s]
            Rtgt1 = Rtgt0; %[km]
            Vtgt1 = Vtgt0; %[km/s]
            
         end
         
         Rtgt2 = transpose(tgt_ephem((find(RANGE == MJD2)),1:3)); %[km] Target after TOF
         Vtgt2 = transpose(tgt_ephem((find(RANGE == MJD2)),4:6)); %[km/s]
         
         if (tm == 0) %Selecting Transfer Method for Minimum Delta-V
            
            tran_n = cross(Rint1,Rtgt2); %Transfer orbit normal vector
            h_n = cross(Rint1,Vint1); %Interceptor S/C orbit normal vector
            
            if (dot(h_n,tran_n) < 0)
               tm = -1; %Long Way
            elseif (dot(h_n,tran_n) > 0)
               tm = 1; %Short Way
            end
            
         end

         [VS] = lambert_c(mu,Rint1,Rtgt2,(TOF*24*3600),tm); %Intercepting S/C Velocity Vectors on Transfer Orbit (t1), (t2)
         Vtran1 = VS(:,1); %[km/s]
         Vtran2 = VS(:,2); %[km/s] 
         Rtran1 = Rint1; %Intercepting S/C Position (t1)
         
         dV1 = Vtran1 - Vint1; %Delta-V Vector Transfer Burn (t1)
         dV2 = Vtgt2 - Vtran2; %Delta-V Vector Rendevous Burn (t2)
            
         C3(k,j) = norm(dV1)^2; %[km^2/s^2] Transfer Orbit C3
         arrival_Vinf(k,j) = norm(dV2); %[km/s] Arrival V-infinity
            
      else
      
         C3(k,j) = NaN;
         arrival_Vinf(k,j) = NaN;
         
      end
      
      LDx(k) = MJD1; %Launch Date
      ADy(j) = MJD2; %Arrival Date
      
      j = j + 1;
      
   end

   k = k + 1;
   
end

% -------------------------------------------------- PORKCHOP PLOTS ---------------------------------------------------

% Plot of selected contours
set(groot,'defaultfigureposition',[700 100 1000 850]);
figure 1

if (numel(C3contours) == 1)
   C3contours = [C3contours(1) C3contours(1)];
end
[C1,h1] = contour(LDx,ADy,transpose(C3),C3contours,'b','LineWidth',2);
clabel(C1,h1,'FontSize',12,'Color','k');
hold on

if (numel(Vinfcontours) == 1)
   Vinfcontours = [Vinfcontours(1) Vinfcontours(1)];
end
[C2,h2] = contour(LDx,ADy,transpose(arrival_Vinf),Vinfcontours,'r','LineWidth',1.5);
clabel(C2,h2,'FontSize',12,'Color','k');

xlabel('Launch Date (MJD)');
ylabel('Arrival Date (MJD)');

lgd = legend('C3','Arrival Vinf');
set(lgd,'FontSize',12,'Location','northwest');
set(gca,'FontSize',12);
grid on

% Plot of full porkchop plot
set(groot,'defaultfigureposition',[700 100 1000 850]);
figure 2

C3min = ceil(min(min(C3))); %Minimum C3 rounded to nearest km^2/s^2
C3full = [C3min:2:C3bound];
[C1,h1] = contour(LDx,ADy,transpose(C3),C3full,'b','LineWidth',2);
clabel(C1,h1,'FontSize',12,'Color','k');
hold on

Vinfmin =  fix(min(min(arrival_Vinf))) + ...
           (round(((min(min(arrival_Vinf))) - ...
           fix(min(min(arrival_Vinf))))*10)/10); %Minimum Arrival Vinf rounded to nearest 10th km/s
Vinffull = [Vinfmin:0.2:Vinfbound];
[C2,h2] = contour(LDx,ADy,transpose(arrival_Vinf),Vinffull,'r','LineWidth',1.5);
clabel(C2,h2,'FontSize',12,'Color','k');

xlabel('Launch Date (MJD)');
ylabel('Arrival Date (MJD)');

lgd = legend('C3','Arrival Vinf');
set(lgd,'FontSize',12,'Location','northwest');
set(gca,'FontSize',12);
grid on



